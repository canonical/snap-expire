#!/bin/sh
usage(){
2>&1 cat <<EOF
USAGE

  $0 [-a auth-id] [-e store-email] [-n ndays] snap-name

DESCRIPTION

  Outputs the branches that expire in number-of-days in JSON format.

  Defaults:
    auth-id: a
    ndays:   5

  If this is your first time running the command, you must provide store-email
  so that Surl can generate your authorization identifier in
  "\$HOME/snap/surl/common/{auth-id}.surl".

ENVIRONMENT

  APILOG: If set, the API response will be logged to that file.

EXIT VALUES

   4 if no branch is to expire in number-of-days;
   0 if one branch is to expire in number-of-days;
  20 if dependency is missing;
  21 if this error message is displayed;
   ? if unexpected error occurs.
EOF
    exit 21
}
require(){
    if ! command -v "$1" >/dev/null; then
        2>&1 echo "$1 missing"
        exit 20
    fi
}
#Take stdin, remove double quotes and dispatch it in the correct format to
#a Mattermost hook.
broadcast(){
    s=$(sed 's/"//g')
    s=$(printf '{"text":"Expiring in <=%s days:\n```\n%s\n```"}' "$ndays" "$s")
    curl -s -X POST -H 'Content-Type:application/json' -d "$s" "$MM_URL"
}

require surl
require jq
require curl

ndays=5
auth=-aa
while getopts e:a:n: option; do
    case "$option" in
    a) auth=-a$OPTARG;;
    n) ndays=$OPTARG;;
    e) email=-e$OPTARG;;
    ?) usage;;
    esac
done

shift "$((OPTIND-1))"
if [ $# != 1 ]; then
    usage
fi

snapname=$1
apiurl="https://dashboard.snapcraft.io/api/v2/snaps/$snapname/releases"
unparsed=apiResp
toExpire=out
if [ -n "$INPUT" ]; then
    unparsed=$INPUT
else
    surl ${auth:+"$auth"} -s production ${email+"$email"}"$apiurl" > "$unparsed"
fi
if <"$unparsed" >"$toExpire" jq -e \
  --arg til "$(date --date="today + $ndays days" +%s)" \
  --arg snapname "$snapname" '
[
  .releases[] |
    select((."expiration-date"//empty | fromdateiso8601) > now
       and (."expiration-date"//empty | fromdateiso8601) < ($til | tonumber))
] | unique_by(.channel, .architecture) |
  # To get output
  .[] | [$snapname,."expiration-date",.channel,.architecture] | @tsv
# Just sets exit code if no match is found
| select (length>0)' && [ -n "$MM_URL" ]; then
    <"$toExpire" broadcast
fi
