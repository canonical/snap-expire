#!/bin/sh -xe
trap broadcast_failure 0
usage(){
2>&1 cat <<EOF
TYPICAL USAGE

  MM_URL=url $0 watch-file

DESCRIPTION

  Writes the branches that will expire in number-of-days to the
  channel specified by the URL incoming hook.

  Each line of the watch-file must be in the format

    snap ndays authfile ids-to-ping

  To generate authfile use surl -a authfile -e emailof@snap.store snapname.

ENVIRONMENT

    MM_URL: The incoming hook to the Mattermost channel.

    APILOG: API responses are be appended to that file.

    DRYRUN: If equal to true, prints the results that would be sent to
            Mattermost to stdout, nullifying effect of MM_URL.

EXIT VALUES

   4 if no branch is to expire in number-of-days;
   0 if one branch is to expire in number-of-days;
  20 if dependency is missing;
  21 if this error message is displayed;
   ? if unexpected error occurs.
EOF
    exit 21
}
require(){
    for cmd in "$@"; do
        if ! command -v "$cmd" >/dev/null; then
            2>&1 echo "$cmd missing"
            exit 20
        fi
    done
}
#Take stdin, remove double quotes and dispatch it in the correct format to
#a Mattermost hook.
broadcast(){
    s=$(sed 's/"//g')
    info="Snap branch expiration warning [bot](https://github.com/canonical/snap-expire)"
    s=$(printf '{"text":"%s\n```\n%s\n```\n%s"}' "$info" "$s" "$pingList")
    curl -s -X POST -H 'Content-Type:application/json' -d "$s" "$1"
}

broadcast_failure(){
    pingList="@nteodosio"
    echo "The bot is in an unreliable state. Logs: $ACTION_URL" | broadcast "$MM_URL"
}

broadcast_debug(){
    s=$(sed 's/"/\\"/g')
    s=$(printf '{"text":"```\n%s\n```"}' "$s")
    curl -s -X POST -H 'Content-Type:application/json' -d "$s" "$1"
}

require surl jq curl

if [ $# != 1 ]; then
    usage
fi

unparsed=$(mktemp)
toExpire=$(mktemp)
while read -r snapname ndays auth ping; do
    case "$snapname" in "#"*) continue;; esac
    apiurl="https://dashboard.snapcraft.io/api/v2/snaps/$snapname/channel-map"
    surl -a "$auth" -s production "$apiurl" > "$unparsed"
    [ -n "$APILOG" ] && cat "$unparsed" >> "$APILOG"
    if <"$unparsed" >>"$toExpire" jq -e \
      --arg til "$(date --date="today + $ndays days" +%s)" \
      --arg snapname "$snapname" -f jsonparse; then
        pingList="$pingList $ping"
        hasResult=1
    fi
done <"$1"

echo "The snaps that would be broadcasted to expire are in $toExpire."
if test -n "$hasResult"; then
    if test "$DRYRUN" = true; then
        cat "$toExpire"
    elif test -n "$MM_URL"; then
        <"$toExpire" broadcast "$MM_URL"
    fi
fi
if test -n "$API_DUMP_MM_URL"; then
    <"$APILOG" broadcast_debug "$API_DUMP_MM_URL"
fi
